import asyncio
import asyncpg
import random
import json
from copy import deepcopy
from read_line_txt import *

db_params = {
        'database': 'quaeroquesto',
        'user': 'postgres',
        'password': 'nBl030130!',
        'host': 'localhost',
        'port': '5432',
    }

async def postgres_insert_query(query, data):
    try:
        conn = await asyncpg.connect(**db_params)
        last_id = await conn.fetchval(query, *data)
        await conn.close()
        return last_id
    except asyncpg.exceptions.ConnectionDoesNotExistError:
        print("Connection was closed unexpectedly. Retrying...")
        await asyncio.sleep(1)  # Wait before retrying
        return await postgres_insert_query(query, data)  # Retry the query
    except Exception as e:
        print(f"Error executing query: {e}")
        return None

async def generer_jeu_data(n):
	compt=0
	for num in range(n):
		compt+=1
		questionnaire = json.loads(questionnaire_json)
		questionnaire_avec_reponses = generer_reponses_aleatoires(deepcopy(questionnaire), compt)
		result = json.dumps(questionnaire_avec_reponses)  # Keep as string
		# Use parameterized query to avoid SQL injection
		query = "INSERT INTO results (content_result, id_questionnary) VALUES ($1, $2)"
		data = (result, 1)
		last_id = await postgres_insert_query(query, data)

def generer_reponses_aleatoires(questionnaire, compt):
	# Fonction pour générer une réponse aléatoire pour chaque question
	for questionnaire_data in questionnaire:
		for question in questionnaire_data['questions']:
			if question['type'] == "FermeeSimpleComponent":
				# Une seule modalité a isChecked à True
				for modalite in question['modalites']:
					modalite['isChecked'] = False
				choix = random.choice(question['modalites'])
				choix['isChecked'] = True
				print(f"FermeeSimpleComponent choice: {choix}")
				print("---------------------------------------------------------------------------------------")
			elif question['type'] == "FermeeMultipleComponent":
				# Plusieurs modalités peuvent avoir isChecked à True
				for modalite in question['modalites']:
					modalite['isChecked'] = random.choice([True, False])
					print(f"FermeeMultipleComponent choice: {modalite}")
					print("---------------------------------------------------------------------------------------")
			elif question['type'] == "EchelleComponent":
				# Valeur comprise entre 0 et 100
				for semantique in question['semantiques']:
					semantique['valeur'] = str(random.randint(0, 100))
					print(f"EchelleComponent choice: {semantique}")
					print("---------------------------------------------------------------------------------------")
			elif question['type'] == "GrilleComponent":
				# Réponse comprise entre 1 et 5
				for ligne in question['lignes']:
					ligne['reponse'] = random.randint(1, 5)
					print(f"GrilleComponent choice: {ligne}")
					print("---------------------------------------------------------------------------------------")
			elif question['type'] == "SatisfactionComponent":
				# Note comprise entre 1 et 7
				question['note'] = str(random.randint(1, 5))
				print(f"SatisfactionComponent choice: {question}")
				print("---------------------------------------------------------------------------------------")
			elif question['type'] == "NotationComponent":
				# Note comprise entre 1 et 10
				question['note'] = random.randint(1, 10)
				print(f"NotationComponent choice: {question}")
				print("---------------------------------------------------------------------------------------")
			elif question['type'] == "OuverteComponent":
				question['reponse'] = lire_ligne("./generators/reponses_esprit_competition.txt", compt)


	return questionnaire


# Exemple de questionnaire
questionnaire_json = '''
[
	{
		"intitule": "Pratiques culinaires",
		"date": "2025-01-29T17:54:06.560Z",
		"questions": [
			{
				"type": "FermeeSimpleComponent",
				"isAutoGenerated": false,
				"initialContent": [
					"968401249",
					"-536620945"
				],
				"obligatoire": "non",
				"isCollapse": true,
				"question": "Aimez-vous cuisiner ?",
				"modalites": [
					{
						"position": 1,
						"libelle": "Oui beaucoup",
						"isChecked": false
					},
					{
						"position": 2,
						"libelle": "Oui assez",
						"isChecked": false
					},
					{
						"position": 3,
						"libelle": "Non pas assez",
						"isChecked": false
					},
					{
						"position": 4,
						"libelle": "Non pas du tout",
						"isChecked": false
					}
				],
				"branchements": []
			},
			{
				"type": "FermeeMultipleComponent",
				"isAutoGenerated": false,
				"obligatoire": "oui",
				"ordonnee": "Oui",
				"maxReponses": 6,
				"isCollapse": true,
				"question": "Qu''est-ce qui explique selon vous que vous n''aimez pas trop ou pas du tout ?",
				"modalites": [
					{
						"position": 1,
						"libelle": "Manque de savoir-faire",
						"isChecked": false
					},
					{
						"position": 2,
						"libelle": "C''est une activité qui prend trop de temps",
						"isChecked": false
					},
					{
						"position": 3,
						"libelle": "C''est ennuyeux",
						"isChecked": false
					},
					{
						"position": 4,
						"libelle": "Vous n''êtes pas patient",
						"isChecked": false
					},
					{
						"position": 5,
						"libelle": "Vous n''aimez tout simplement pas",
						"isChecked": false
					},
					{
						"position": 6,
						"libelle": "Autres",
						"isChecked": false
					}
				],
				"branchements": []
			},
			{
				"type": "EchelleComponent",
				"isAutoGenerated": false,
				"obligatoire": "oui",
				"isCollapse": true,
				"question": "Que pensez-vous de l''activité cuisine au sein du foyer ?",
				"semantiques": [
					{
						"position": 1,
						"libelleGauche": "C''est une source de discorde",
						"libelleDroit": "Elle permet de souder le couple"
					},
					{
						"position": 2,
						"libelleGauche": "C''est un moment de forte exitation",
						"libelleDroit": "C''est un moment de calme et de sérénité"
					},
					{
						"position": 3,
						"libelleGauche": "C''est un vrai calvaire",
						"libelleDroit": "C''est un pur bonheur"
					}
				],
				"branchements": []
			},
			{
				"type": "NotationComponent",
				"isAutoGenerated": false,
				"obligatoire": "oui",
				"isCollapse": true,
				"nbStars": 10,
				"note": 0,
				"question": "Comment jugez-vous vos talents de cuisinier, 1 étoile voulant dire que vous êtes un très mauvais cuisinier ?"
			},
			{
				"type": "OuverteComponent",
				"isAutoGenerated": false,
				"obligatoire": "non",
				"isCollapse": true,
				"reponse": "undefined",
				"question": "Que pensez-vous de la cuisine nouvelle ?",
				"branchements": []
			},
			{
				"type": "GrilleComponent",
				"obligatoire": "oui",
				"isCollapse": false,
				"question": "Voici plusieurs propositions concernant les talents de cuisinier, veuillez indiquer votre niveau d''accord avec chacune d''elles ?",
				"lignes": [
					{
						"position": 1,
						"libelle": "Les talents de cuisinier se transmettent de parent à enfant"
					},
					{
						"position": 2,
						"libelle": "Le talent de cuisinier est inné, il ne se cultive pas"
					},
					{
						"position": 3,
						"libelle": "Les talents de cuisinier ne durent pas toute la vie"
					},
					{
						"position": 4,
						"libelle": "Les talents de cuisinier peuvent se révéler tardivement"
					},
					{
						"position": 5,
						"libelle": "Les talents peuvent disparaître aussi vite qu'ils sont apparus"
					}
				],
				"colonnes": [
					{
						"position": 1,
						"libelle": "Tout à fait d'accord"
					},
					{
						"position": 2,
						"libelle": "Plutôt d'accord"
					},
					{
						"position": 3,
						"libelle": "Ni d'accord, ni pas d'accord"
					},
					{
						"position": 4,
						"libelle": "Plutôt pas d'accord"
					},
					{
						"position": 5,
						"libelle": "Pas du tout d'accord"
					}
				],
				"branchements": []
			}
		]
	}
]
'''

if __name__ == "__main__":
    asyncio.run(generer_jeu_data(900))